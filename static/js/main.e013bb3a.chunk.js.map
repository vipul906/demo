{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","sigCanvas","createRef","state","imageURL","setImageURL","clear","current","save","setState","getTrimmedCanvas","toDataURL","mydownload","imageurl","img","document","getElementById","canvas","getContext","width","height","a","createElement","href","download","body","appendChild","click","this","props","classes","className","modal","trigger","closeOnDocumentClick","close","penColor","ref","canvasProps","onClick","src","id","alt","style","display","margin","border","background","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wRAoGeA,G,wNArFbC,UAAYC,sB,EACZC,MAAQ,CACNC,SAAU,KACVC,YAAa,M,EAEfC,MAAQ,kBAAM,EAAKL,UAAUM,QAAQD,S,EACrCE,KAAO,WACL,EAAKC,SAAS,CACZL,SAAU,EAAKH,UAAUM,QACtBG,mBACAC,UAAU,gB,EAGjBC,WAAa,SAACC,GACZ,IAAIC,EAAMC,SAASC,eAAe,UAE9BC,EAASF,SAASC,eAAe,UAC3BC,EAAOC,WAAW,MAE5BD,EAAOE,MAAQL,EAAIK,MACnBF,EAAOG,OAASN,EAAIM,OAGpB,IAAIC,EAAIN,SAASO,cAAc,KAC/BD,EAAEE,KAAOV,EACTQ,EAAEG,SAAW,aACbT,SAASU,KAAKC,YAAYL,GAC1BA,EAAEM,S,uDAEM,IAAD,OACaC,KAAKC,MAAjBC,QACR,OACE,yBAAKC,UAAU,OACb,2DACA,4BAAQA,UAAU,cAChB,kBAAC,IAAD,CACEC,OAAK,EACLC,QAAS,uDACTC,sBAAsB,IACrB,SAACC,GAAD,OACC,oCACE,kBAAC,IAAD,CACEC,SAAS,MACTC,IAAK,EAAKpC,UACVqC,YAAa,CACXP,UAAW,qBAGf,4BAAQQ,QAAS,EAAK/B,MAAtB,QACA,4BAAQ+B,QAAS,EAAKjC,OAAtB,SACA,4BAAQiC,QAASJ,GAAjB,aAILP,KAAKzB,MAAMC,SACV,oCACG,IACD,yBACEoC,IAAKZ,KAAKzB,MAAMC,SAChBqC,GAAG,SACHC,IAAI,eACJC,MAAO,CACLC,QAAS,QACTC,OAAQ,SACRC,OAAQ,kBACRC,WAAY,QACZ5B,MAAO,QACPC,OAAQ,WAGZ,6BACA,4BAAQmB,QAAS,kBAAM,EAAK3B,WAAW,EAAKT,MAAMC,YAAlD,YAGA,4BAAQqC,GAAG,UAAX,+DAIA,W,GA/EIO,cCFEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFzC,SAASC,eAAe,SDyHpB,kBAAmByC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.e013bb3a.chunk.js","sourcesContent":["import React, { useState, useRef, createRef, Component } from \"react\";\n//import logo from \"./logo.svg\";\nimport Popup from \"reactjs-popup\";\nimport SignatureCanvas from \"react-signature-canvas\";\nimport \"./App.css\";\nimport \"./sigCanvas.css\";\n\nconst style = {\n  sigCanva: {\n    border: \"1px solid black\",\n    width: \"100%\",\n    minheight: \"500px\",\n  },\n};\nclass App extends Component {\n  sigCanvas = createRef();\n  state = {\n    imageURL: null,\n    setImageURL: null,\n  };\n  clear = () => this.sigCanvas.current.clear();\n  save = () => {\n    this.setState({\n      imageURL: this.sigCanvas.current\n        .getTrimmedCanvas()\n        .toDataURL(\"image/png\"),\n    });\n  };\n  mydownload = (imageurl) => {\n    var img = document.getElementById(\"imgurl\");\n\n    var canvas = document.getElementById(\"canvas\");\n    var ctx = canvas.getContext(\"2d\");\n\n    canvas.width = img.width;\n    canvas.height = img.height;\n\n    // ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n    var a = document.createElement(\"a\");\n    a.href = imageurl; // canvas.toDataURL(\"image/png\");\n    a.download = \"sample.jpg\";\n    document.body.appendChild(a);\n    a.click();\n  };\n  render() {\n    const { classes } = this.props;\n    return (\n      <div className=\"App\">\n        <h1>Welcome To My Website !!!!!</h1>\n        <header className=\"App-header\">\n          <Popup\n            modal\n            trigger={<button> Open Signature Pad</button>}\n            closeOnDocumentClick={false}>\n            {(close) => (\n              <>\n                <SignatureCanvas\n                  penColor=\"red\"\n                  ref={this.sigCanvas} //pass our ref into signature component\n                  canvasProps={{\n                    className: \"signatureCanvas\",\n                  }}\n                />\n                <button onClick={this.save}>save</button>\n                <button onClick={this.clear}>clear</button>\n                <button onClick={close}>close</button>\n              </>\n            )}\n          </Popup>\n          {this.state.imageURL ? (\n            <>\n              {\" \"}\n              <img\n                src={this.state.imageURL}\n                id=\"imgurl\"\n                alt=\"my signature\"\n                style={{\n                  display: \"block\",\n                  margin: \"0 auto\",\n                  border: \"1px solid black\",\n                  background: \"white\",\n                  width: \"100px\",\n                  height: \"100px\",\n                }}\n              />\n              <br />\n              <button onClick={() => this.mydownload(this.state.imageURL)}>\n                download\n              </button>\n              <canvas id=\"canvas\">\n                Sorry. Your browser does not support HTML5 canvas element.\n              </canvas>\n            </>\n          ) : null}\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers:// Learn more about service workers: https://bit.ly/CRA-PWA\n\nserviceWorker.unregister();\n"],"sourceRoot":""}